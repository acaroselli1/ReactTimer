{"version":3,"sources":["logo.svg","Timer.js","App.js","serviceWorker.js","index.js","loneRanger.mp3","airHorn.mp3"],"names":["module","exports","__webpack_require__","p","Time","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","test","start","setState","resetClicked","document","getElementById","play","setInterval","previousState","count","clickCount","stop","clearInterval","pause","reset","inputValue","setTimer","e","state","handleInput","silenceAirHorn","target","value","handleEnterPressed","key","_React$createElement","_React$createElement2","react_default","a","createElement","style","height","width","display","flexDirection","justifyContent","position","alignItems","react_circular_progressbar_dist_default","counterClockwise","percentage","styles","path","stroke","id","defineProperty","song","airHorn","index_es","onChange","placeholder","marginBottom","fontFamily","color","raised","backgroundColor","onClick","dist_default","variant","disabled","window","addEventListener","startCount","removeEventListener","Component","App","className","Timer_Time","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.576a7aa3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport Odometer from \"react-odometerjs\";\r\nimport \"odometer/themes/odometer-theme-digital.css\";\r\nimport { Button, Input } from \"@material-ui/core\";\r\nimport CircularProgressbar from \"react-circular-progressbar\";\r\nimport song from './loneRanger.mp3';\r\nimport airHorn from './airHorn.mp3';\r\n\r\nexport default class Time extends Component {\r\n  // default values\r\n\r\n  test = 0;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      count: 1,\r\n      clickCount: 0,\r\n      inputValue: \"\",\r\n      resetClicked:false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          height: \"100vh\",\r\n          width: \"100vw\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          position: \"relative\"\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            height: \"100vh\",\r\n            width: \"100vw\",\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            position: \"absolute\"\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              flexDirection: \"column\",\r\n              justifyContent: \"center\",\r\n              position: \"absolute\",\r\n              height: \"320x\",\r\n              width: \"320px\",\r\n            }}\r\n          >\r\n            <CircularProgressbar\r\n              counterClockwise=\"false\"\r\n              percentage={this.state.resetClicked ? 0 : (this.state.count / this.state.inputValue) * 100}\r\n              styles={{\r\n                path:{\r\n                  stroke:'navy'\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\"\r\n          }}\r\n        >\r\n          <audio id=\"loneRanger\" id=\"loneRanger\" src={song} />\r\n          <audio id=\"airHorn\" id=\"airHorn\" src={airHorn} loop/>\r\n          <div>\r\n          <Input\r\n            onChange={this.handleInput}\r\n            value={this.state.inputValue}\r\n            placeholder=\"Time(sec)\"\r\n            style={{marginBottom:10,width:100,fontFamily: \"Orbitron, sans-serif\",color:'red'}}\r\n          /><br/>\r\n          <Button\r\n            raised={true}\r\n            style={{ backgroundColor: \"black\", color: \"white\" }}\r\n            onClick={this.setTimer}\r\n          >\r\n            Set Timer\r\n          </Button>\r\n          </div>\r\n        </div>\r\n        <h3 style={{ fontFamily: \"Orbitron, sans-serif\" }}>\r\n          Current Count:{\" \"}\r\n          <Odometer value={this.state.count >= 0 ? this.state.count : \"0\"} />\r\n        </h3>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\"\r\n          }}\r\n        >\r\n          <Button\r\n            raised={true}\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            onClick={this.start}\r\n            disabled={this.state.count == 0 && this.state.clickCount === 0 ? true: false}\r\n          >\r\n            Start\r\n          </Button>\r\n          <Button\r\n            raised={true}\r\n            color=\"secondary\"\r\n            variant=\"contained\"\r\n            onClick={this.stop}\r\n          >\r\n            Stop\r\n          </Button>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\"\r\n          }}\r\n        >\r\n          <Button\r\n            style={{ backgroundColor: \"black\", color: \"white\" }}\r\n            raised={true}\r\n            onClick={this.reset}\r\n            disabled={this.state.count === 0 ? true: false}\r\n          >\r\n            Reset\r\n          </Button>\r\n         \r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\"\r\n          }}\r\n        >\r\n          <Button\r\n            raised={true}\r\n            onClick={this.silenceAirHorn}\r\n          >\r\n            Silence Air Horn \r\n          </Button>\r\n         \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // actions\r\n  componentDidMount() {\r\n    window.addEventListener(\"keydown\", this.handleEnterPressed);\r\n    this.setState({\r\n      count: this.props.startCount\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"keydown\", this.handleEnterPressed);\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    if (this.state.count ===0){\r\n      document.getElementById(\"loneRanger\").pause();\r\n      this.stop();\r\n      if (this.state.clickCount > 0){\r\n        document.getElementById(\"airHorn\").play();\r\n      }\r\n    }\r\n  }\r\n\r\n  start = () => {\r\n    this.setState({\r\n      resetClicked:false\r\n    });\r\n\r\n    document.getElementById(\"loneRanger\").play();\r\n      this.test = setInterval(() => {\r\n        this.setState(previousState => ({ count: previousState.count - 1 }));\r\n      }, 1000);\r\n      this.setState(previousState => ({\r\n        clickCount: previousState.clickCount + 1\r\n      }));\r\n  };\r\n\r\n  stop = () => {\r\n    clearInterval(this.test);\r\n    document.getElementById(\"loneRanger\").pause();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      clickCount: 0,\r\n      inputValue: 0,\r\n      count:0,\r\n      resetClicked:true\r\n    });\r\n   \r\n  };\r\n\r\n  setTimer = e => {\r\n    document.getElementById(\"airHorn\").pause();\r\n    this.setState({\r\n      count: this.state.inputValue\r\n    });\r\n  };\r\n\r\n  handleInput = e => {\r\n    this.silenceAirHorn();\r\n    this.setState({\r\n      inputValue: e.target.value\r\n    });\r\n  };\r\n\r\n  handleEnterPressed = e => {\r\n    if (e.key == \"Enter\") {\r\n      this.setTimer();\r\n    }\r\n  };\r\n\r\n  silenceAirHorn(){\r\n    document.getElementById(\"airHorn\").pause();\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Timer from \"./Timer\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Timer startCount={0}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loneRanger.5f178977.mp3\";","module.exports = __webpack_public_path__ + \"static/media/airHorn.95897491.mp3\";"],"sourceRoot":""}